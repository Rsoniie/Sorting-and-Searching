#include <bits/stdc++.h> 
void merge(long long *arr, int s, int e, int &cnt)
{
    int mid = (s+e)/2;
    int len1 = mid-s+1;
    int len2 = e - mid;
    vector<int> v1(len1);
    vector<int> v2(len2);
    int k = s;
    for(int i=0;i<len1;i++)
    {
        v1[i] = (arr[k++]);
    }
    k = mid+1;
    for(int i=0;i<len2;i++)
    {
        v2[i] = (arr[k++]);
    }

    k = s;
    int i = 0;
    int j = 0;
    while(i<len1 && j < len2)
    {
        if(v1[i] <= v2[j])
        {
           // cnt++;
            arr[k++] = v1[i++];
        }
        else 
        {
            cnt+=(len1-i);
            arr[k++] = v2[j++];
        }
    }

    while(i<len1)
    {
        arr[k++] = v1[i++];
    }
    while(j<len2)
    {
        arr[k++] = v2[j++];
    }
}
void ms(long long *arr, int s, int e, int &cnt)
{
    if(s >= e)
    {
        return ;
    }

    int mid = (s+e)/2;
    ms(arr, s, mid, cnt);
    ms(arr, mid+1, e, cnt);
    merge(arr, s, e, cnt);
}
long long getInversions(long long *arr, int n){
    int s = 0;
    int e = n-1;
    int cnt=0;
    ms(arr, s, e, cnt);
    return cnt;
}
